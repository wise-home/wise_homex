default_env: &default_env
  MIX_ENV: test

default_build: &default_build
  parallelism: 1

  working_directory: ~/app

  steps:
    - run:
        name: "Set PATH"
        command: echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:$PATH' >> $BASH_ENV

    - checkout

    - run:
        name: Save cache version to file
        command: echo "$CIRCLE_STAGE $CACHE_VERSION" > ~/.cache_version

    - restore_cache:
        keys:
          - cache-{{ checksum "~/.cache_version" }}-{{ .Branch }}
          - cache-{{ checksum "~/.cache_version" }}-master

    - run:
        name: Update apt
        command: sudo apt update

    # Control the exact version of Elixir and Erlang via .tool-versions
    - run: rm -f .tool-versions
    - run: echo "elixir $ELIXIR_VERSION" >> .tool-versions
    - run: echo "erlang $ERLANG_VERSION" >> .tool-versions
    - run: cat .tool-versions
    - run: sudo apt install -y build-essential autoconf m4 libncurses5-dev libssh-dev
    - run: if [ ! -d ~/.asdf ] ; then git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.6.3; fi
    - run: if ! asdf plugin-list | grep erlang; then asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git; fi
    - run: if ! asdf plugin-list | grep elixir; then asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git; fi
    - run:
        command: erlang_version=$(awk '/erlang/ { print $2 }' .tool-versions) && asdf install erlang ${erlang_version}
        no_output_timeout: 20m
    - run: elixir_version=$(awk '/elixir/ { print $2 }' .tool-versions) && asdf install elixir ${elixir_version}

    - run: mix local.hex --force
    - run: mix local.rebar --force

    - run: mix deps.get
    - run: mix deps.compile
    - run: mix compile
    - run: mix dialyzer --plt --no-compile

    - save_cache:
        key: cache-{{ checksum "~/.cache_version" }}-{{ .Branch }}-{{ .BuildNum }}
        paths:
          - _build
          - deps
          - ~/.asdf

    - run: mix test --trace
    - run: mix credo
    - run: mix dialyzer --no-check --no-compile
    - run: mix format --check-formatted

version: 2
jobs:
  "elixir 1.9 - erlang 22.2":
    <<: *default_build
    docker:
      # This version of Elixir is overruled by asdf
      - image: circleci/elixir:1.8
        environment:
          <<: *default_env
          ELIXIR_VERSION: "1.9.4-otp-22"
          ERLANG_VERSION: "22.2.1"
          CACHE_VERSION: "v2"

  "elixir 1.9 - erlang 22.1":
    <<: *default_build
    docker:
      # This version of Elixir is overruled by asdf
      - image: circleci/elixir:1.8
        environment:
          <<: *default_env
          ELIXIR_VERSION: "1.9.4-otp-22"
          ERLANG_VERSION: "22.1.8"
          CACHE_VERSION: "v11"

  "elixir 1.9 - erlang 22.0":
    <<: *default_build
    docker:
      # This version of Elixir is overruled by asdf
      - image: circleci/elixir:1.8
        environment:
          <<: *default_env
          ELIXIR_VERSION: "1.9.4-otp-22"
          ERLANG_VERSION: "22.0.7"
          CACHE_VERSION: "v3"

workflows:
  version: 2
  "elixir 1.9 - erlang 22.2":
    jobs:
      - "elixir 1.9 - erlang 22.2"

  "elixir 1.9 - erlang 22.1":
    jobs:
      - "elixir 1.9 - erlang 22.1"

  "elixir 1.9 - erlang 22.0":
    jobs:
      - "elixir 1.9 - erlang 22.0"
